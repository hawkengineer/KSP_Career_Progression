// *************************** Random Sounding Rocket Contract
// 
// Purpose is to provide a repeating contract for sounding rockets for science collection after the main contracts for the division are complete  
//

CONTRACT_TYPE
{
	name 			= RandomSoundingRocket
	sortKey 		= 200
	group 			= AeronauticalExplorationDivision
	agent			= Aeronautical Exploration Division
	title			= #AED_RandomRocket_Title	  
	//genericTitle 	= #AED_RandomRocket_Title	
	topic			= Exploration
	notes			= #AED_RandomRocket_Notes	
	synopsis 		= #AED_RandomRocket_Synopsis
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 0
	maxExpiry		= 0
	deadline		= 100
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= HomeWorld()
	
	description 		= #AED_RandomRocket_Generic	
	//genericDescription 	= 
	completedMessage	= #AED_RandomRocket_Complete	
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.2					// Reputation Increase = 15
	rewardFunds			= @KSP_Career_Progression:baseComp * 0.8					// Funds = $80,000
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.4						// Adv Funds = $40,000
	failureReputation 	= @rewardReputation * 0.3									// Reputation = 15
	failureFunds		= @rewardFunds * 0.05										// Failure Funds = $5,000
	
	// Contract Significance
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//

	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		scienceTemp1	= AllScienceSubjectsByBody([@targetBody])
		//scienceTemp1	= AllScienceSubjectsByBodyExperiment([@targetBody], [@experiment])
		scienceTemp2	= @scienceTemp1.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )    			// Find where remaining science is greater than 10% of total science
		scienceTemp3	= @scienceTemp2.Where(sc => sc.Situation() == InSpaceLow )									// Limit to Low Space Situations
		scienceList		= @scienceTemp3.Random(2)																	// Select up to two random science collections
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = ExtendedSoundingRocket
		title = Complete @contractType Contract
	}

	REQUIREMENT
    {
        type = Expression
        expression = @/scienceList.Count() >= 1

        title = Must have a valid experiment to perform
    }

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = SoundingRandom
		type = VesselParameterGroup
		title = Build a sounding rocket to collect the required science
		define = SoundingRandom
		dissassociateVesselsOnContractCompletion = true
		dissassociateVesselsOnContractFailure = true		
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new sounding rocket
			hideChildren = false
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			hideChildren = true
			title = Needs to be uncrewed rocket
			minCrew = 0
			maxCrew = 0
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = FLYING
		}
		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			subject 		= @scienceID
			recoveryMethod 	= Ideal
			completedMessage = Objective Complete!  We collected @scienceID.Experiment() data!
			title 			= Collect science data from the @scienceID.Experiment() in @scienceID.Situation()
			ITERATOR
			{
				type = ScienceSubject
				scienceID = @/scienceList
 
				REQUIREMENT
				{
					type = Expression
					expression = @../scienceList.Count() > 0
				}

			}
		}
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			title = #AED_RandomRocket_MSG1	
			hideChildren = false
		}
	completedMessage = #AED_RandomRocket_MSG2	
	completeInSequence = true
		
	}

	//-------------------------------------------------------------------------------------------------------------------------
	// Contract Behaviors
	//

}

