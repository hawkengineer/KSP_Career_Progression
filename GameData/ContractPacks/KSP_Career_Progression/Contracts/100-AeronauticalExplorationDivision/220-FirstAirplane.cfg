// *************************** First Airplane Contract
// 
// Goal for this contract is to build and fly an airplane.  
//

CONTRACT_TYPE
{
	name 			= FirstAirplane
	sortKey 		= 220
	group 			= AeronauticalExplorationDivision
	agent			= Aeronautical Exploration Division
	title			= First flight with an airplane
	genericTitle 	= First flight with an airplane
	topic			= Exploration
	notes			= First flight with an airplane
	synopsis 		= First flight with an airplane
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	deadline		= 60
	maxCompletions 	= 1
	maxSimultaneous = 1
	targetBody		= HomeWorld()
	
	description 			= We need you to design, build and fly an aircraft with a crew.  After takeoff, we need to maintain @minAltitude for one minute and return safely to KSC.
	genericDescription 		= Build, design, and fly an airplane at the target altitude and return safely home.
	completedMessage		= Success!  We reached the desired altitude and returned safely!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.5				// Science Reward 2.5
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.3					// Reputation Increase = 22.5
	rewardFunds			= @KSP_Career_Progression:baseComp * 0.6					// Funds = $60,000
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.3						// Adv Funds = $15,000
	failureReputation 	= @rewardReputation * 0.3									// Reputation = 15
	failureFunds		= @rewardFunds * 0.05										// Failure Funds = $5,000
	
	// Contract Significance
	//
	//  Valid Types: Trivial, Significant, Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//

	DATA
	{
		type	= List<float>
		minAlt 	= [ 1500, 5000, 10000, 25000]
	}

	DATA
	{
		type 		= float
		AltIndex	= AltitudeIndex
	}

	DATA
	{
		type 		= float
		minAltitude = @minAlt.ElementAt(@AltIndex)
	}

	DATA
	{
		type 	= float
		curFunds 	= 5000.0 + (@minAltitude * 1.5)
	}

	DATA
	{
		type 	= float
		maxAltitude = @minAltitude + @minAltitude * 0.08
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = PartUnlocked
		type = PartUnlocked

		part = Mark1Cockpit
	}

    REQUIREMENT
    {
        type = Expression
        title = Crewed Duration

        expression = @/AltIndex < @/minAlt.Count()
    }

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = VesselGroup
		type = VesselParameterGroup
		title = Maintain between @/minAltitude and @/maxAltitude m with a crewed aircraft.
		define = lowAirplane
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
			maxCrew = 99
			title = Have at least 1 crewmember on board
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Plane
			name = Vessel needs to be a plane.
		}
		
		PARAMETER
		{
			name = ReachAlt
			type = ReachState
			title = Hold between @/minAltitude and @/maxAltitude meters.
			disableOnStateChange = false
			
			PARAMETER
			{
				name = Duration
				type = Duration
				duration = 1m
				preWaitText = Reach specified altitude.
				waitingText = Completing Flight
				completionText = Flight completed, you are cleared to land.
			}
		}
		PARAMETER
		{
			name = land
			type = ReachState
			title = Land safely and recover the plane
			maxSpeed = 1
			situation = LANDED
			disableOnStateChange = false
			completeInSequence = true
		}

	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviors
	//
    BEHAVIOUR
    {
        name = IncrementIndex
        type = Expression

        CONTRACT_COMPLETED_SUCCESS
        {
            AltitudeIndex = AltitudeIndex + 1
        }
    }	

}

