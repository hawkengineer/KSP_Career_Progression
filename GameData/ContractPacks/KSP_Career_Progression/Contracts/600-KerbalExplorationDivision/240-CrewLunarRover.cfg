// *************************** Crew Moon Landing and Return
// 
// Objectives:
//    	1. Build, launch, and land a crew rover to the surface of the moon
//		2. Build, launch, and land a crew ship to the rover
//		3. Use rover to explore 2 or 3 biomes for science collection
//

CONTRACT_TYPE
{
	name 			= CrewLunarRover
	sortKey 		= 240
	group 			= KerbalExplorationDivision
	title			= #KED_CrewLunarRover_Title
	genericTitle 	= 
	topic			= Exploration
	notes			= #KED_CrewLunarRover_Notes
	synopsis 		= #KED_CrewLunarRover_Synopsis
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 15
	deadline		= 250
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBodyValid1
	
	description 		= #KED_CrewLunarRover_Desc
	genericDescription 	= #KED_CrewLunarRover_Generic
	completedMessage	= #KED_CrewLunarRover_Complete
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.1				// Science Reward
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.2					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 1.1					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.6						// Adv Funds 
	failureReputation 	= @rewardReputation * 0.7									// Reputation
	failureFunds		= @rewardFunds * 0.5										// Failure Funds
	
	// Contract Significance
	//
	//     Trivial
    //     Significant
    //     Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Career_Progression:homeMoonsSurface
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}	

	DATA
	{
		type 			= List<Biome>
        hidden = true
		biometemp		= @targetBody.Biomes().Where(sc => sc.RemainingScience() > 15).Random(2)
	}


	DATA
	{
		type 			= Biome
        hidden = true
		//biomeSelect		= @/scienceSubjects.ElementAt(0).Biome()
		biome1			= @/biometemp.First()
		biome2			= @/biometemp.Last()
		title 			= Determine the biome target for the experiments
	}
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ asteroidSample ])
		//experiments1 = @experiments.Where(e => !e.ID().StartsWith("ROCScience_"))
		experiments2 = @experiments.Random(4,8)
    }

	DATA
    {
		type = List<ScienceSubject>
        hidden = true

		//tempo = AllScienceSubjectsByBody(@/targetBody)
		//scienceSelect	= AllScienceSubjectsByBiome([@/biomeSelect]).Where(sc => sc.RemainingScience() >= 1.0 && sc.Situation() == SrfLanded ).Random(6)
        //scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment( [@/targetBody] , @experiments2 )
		scienceSubjectsTemp1 = AllScienceSubjectsByBiomeExperiment( [@/biome1] , @/experiments2 )
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == SrfLanded )
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.RemainingScience() >= 3.0)
		
		scienceSubjects1 = @scienceSubjectsTemp3.Random(3,5)
    }
	DATA
    {
		type = List<ScienceSubject>
        hidden = true

		//tempo = AllScienceSubjectsByBody(@/targetBody)
		//scienceSelect	= AllScienceSubjectsByBiome([@/biomeSelect]).Where(sc => sc.RemainingScience() >= 1.0 && sc.Situation() == SrfLanded ).Random(6)
        //scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment( [@/targetBody] , @experiments2 )
		scienceSubjectsTemp4 = AllScienceSubjectsByBiomeExperiment( [@/biome2] , @/experiments2 )
		scienceSubjectsTemp5 = @scienceSubjectsTemp4.Where(s => s.Situation() == SrfLanded )
		scienceSubjectsTemp6 = @scienceSubjectsTemp5.Where(s => s.RemainingScience() >= 3.0)
		
		scienceSubjects2 = @scienceSubjectsTemp6.Random(3,5)
    }	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Ideal
    }
	DATA
	{
		type = List<Vessel>
		requiredValue = true
		roverList = AllVessels().Where(v => v.VesselType() == Rover && v.CrewCapacity() >= 1 && v.CelestialBody() == @/targetBody && v.IsLanded() )
		title = #KED_CrewLunarRover_MSG14
	}

	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
    REQUIREMENT
    {
        type = Expression
        title = Crewed Duration

        expression = $CrewInSpaceDay >= 7
    }

	REQUIREMENT
	{
		name = Landing
		type = Landing
		checkType = MANNED
    }
	REQUIREMENT
	{
		type = Expression
		title = #KED_CrewLunarRover_MSG1
		expression = @/scienceSubjects1.Count() >= 1
	}
	REQUIREMENT
	{
		type = Expression
		title = #KED_CrewLunarRover_MSG2
		expression = @/scienceSubjects2.Count() >= 1
	}
	REQUIREMENT
	{
		type = Expression
		title = #KED_CrewLunarRover_MSG15
		expression = @/roverList.Count() <= 1
	}
	REQUIREMENT:NEEDS[SCANSAT]
	{
		name = SCANsatCoverage
		type = SCANsatCoverage
		scanType = Biome
		title = #KED_CrewLunarRover_MSG3
	}


	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = CrewLunarRover
		type = VesselParameterGroup
		title = #KED_CrewLunarRover_MSG4
		define = CrewLunarRover

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Rover
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCrewCapacity
			type = HasCrewCapacity
			minCapacity = 1
			maxCapacity = 99
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = ORBITING
			title = #KED_CrewLunarRover_MSG5
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			biome = @/biome1
			title = #KED_CrewLunarSurface_MSG6
		}
		completedMessage 	= First step is complete, our rover is safely on the surface!  Now we need to send a crew there to begin our exploration!
		rewardFunds			= @KSP_Career_Progression:baseComp * 1.5                
	}

	PARAMETER
	{
		name = CrewLunarSurface
		type = VesselParameterGroup
		title = #KED_CrewLunarRover_MSG8
		define = CrewRover
	
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Ship
			vesselType = Lander			
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 1
			maxCrew = 10
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = ORBITING
			title = #KED_CrewLunarRover_MSG7
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			biome = @/biome1
			title = #KED_CrewLunarSurface_MSG9
		}
		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			vessel = CrewLunarRover
			distance = 3500.0
			title = #KED_CrewLunarSurface_MSG10
		}
	completeInSequence = true
	}		

	PARAMETER
	{
		name = CollectScience
		type = CollectScience
		
		title = #KED_CrewLunarRover_MSG11
		biome = @scienceSubject1.Biome()
		situation = @scienceSubject1.Situation()
		experiment = @scienceSubject1.Experiment()
		recoveryMethod = @/recoveryMethod
		rewardFunds			= @KSP_Career_Progression:baseComp * 0.1               
		disableOnStateChange = true
		completeInSequence 	= true
	
		ITERATOR
		{
			type = ScienceSubject
			scienceSubject1 = @/scienceSubjects1
		}
	}
	PARAMETER
	{
		name = ReachState
		type = ReachState
		situation = LANDED
		biome = @/biome2
		title = #KED_CrewLunarSurface_MSG12
		completeInSequence 	= true
	}
	PARAMETER
	{
		name = CollectScience
		type = CollectScience
		
		title = #KED_CrewLunarRover_MSG13
		biome = @scienceSubject2.Biome()
		situation = @scienceSubject2.Situation()
		experiment = @scienceSubject2.Experiment()
		recoveryMethod = @/recoveryMethod
		rewardFunds			= @KSP_Career_Progression:baseComp * 0.1               
		disableOnStateChange = true
		completeInSequence 	= true
	
		ITERATOR
		{
			type = ScienceSubject
			scienceSubject2 = @/scienceSubjects2
		}
	}

	PARAMETER
	{
		name = ReturnHome
		type = ReturnHome
		targetBody = HomeWorld()
		title = Return Home Safely
		hideChildren = true
		completeInSequence = true
	}

	PARAMETER
	{
		name = KerbalDeaths
		type = KerbalDeaths
		countMax = 1
		vessel = CrewLunarSurface
		vessel = CrewLunarRover
	}
		

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviors
	//

}

