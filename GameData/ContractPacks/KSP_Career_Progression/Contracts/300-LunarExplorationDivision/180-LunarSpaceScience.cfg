// *************************** Lunar Space Science Missions
// 
// Goal is to send satellites to Lunar Orbit for the purpose of collecting science in low and high space.
//

CONTRACT_TYPE
{
	name 			= LunarSpaceScience
	sortKey 		= 180
	group 			= LunarExplorationDivision
	title			= Science Orbital Collection around @/targetBody
	genericTitle 	= Orbital science collection mission.
	topic			= Exploration
	notes			= Send a probe to collect the required science around @/targetBody  
	synopsis 		= Send a probe to collect the required science around @/targetBody  
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	deadline		= 200
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		=  @/targetBodyValid1
	
	description 		= Send a probe for the purpose of collecting science around the moon of @/targetBody.
	genericDescription 	= Send a science probe to collect the required science data.
	completedMessage	= Mission is complete, our scientists are happy to receive the new data!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.5				// Science Reward 
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.3					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 0.8					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.5						// Adv Funds
	failureReputation 	= @rewardReputation * 0.3									// Reputation
	failureFunds		= @rewardFunds * 0.05										// Failure Funds
	
	// Contract Significance
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @LunarExplorationDivision:homeMoons
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
		moontemp 			= @LunarExplorationDivision:homeMoonsSurface.First()
	}	

   DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(4)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1L = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2L = @scienceSubjectsTemp1L.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3L = @scienceSubjectsTemp2L.Where(s => s.Situation() == InSpaceLow )
		scienceSubjectsTemp4L = @scienceSubjectsTemp3L.Where(s => s.RemainingScience() >= 0.5)

        scienceListLow = @scienceSubjectsTemp4L.Random(3,6)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1H = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2H = @scienceSubjectsTemp1H.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3H = @scienceSubjectsTemp2H.Where(s => s.Situation() == InSpaceHigh)
		scienceSubjectsTemp4H = @scienceSubjectsTemp3H.Where(s => s.RemainingScience() >= 0.5)

        scienceListHigh = @scienceSubjectsTemp4H.Random(3,6)
    }
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name 		= Orbit
		type 		= Orbit
		checkType 	= UNMANNED
		title 		= Must have reached orbit about the moon.
	}
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceListLow.Count() >= 1

        title = Must have a valid experiment to perform in Low Orbit
    }
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceListHigh.Count() >= 1

        title = Must have a valid experiment to perform in High Orbit
    }	
	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        define = ScienceSat
        disableOnStateChange = false

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = Needs to be a probe (uncrewed)
			minCrew = 0
			maxCrew = 0
		}
 		PARAMETER
        {
            name = ReachState
            type = ReachState
			situation = ORBITING
			title = Reach orbit around the moon of @/targetBody

        }
		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubject.Biome()
			situation = @scienceSubject.Situation()
			experiment = @scienceSubject.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubject.Experiment() data!
			title 			= Collect science data from the @scienceSubject.Experiment() in @scienceSubject.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubject = @/scienceListLow
			}
	
		}

		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubjectH.Biome()
			situation = @scienceSubjectH.Situation()
			experiment = @scienceSubjectH.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubjectH.Experiment() data!
			title 			= Collect science data from the @scienceSubjectH.Experiment() in @scienceSubjectH.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubjectH = @/scienceListHigh
			}
	
		}

	}


	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//	

	
}

