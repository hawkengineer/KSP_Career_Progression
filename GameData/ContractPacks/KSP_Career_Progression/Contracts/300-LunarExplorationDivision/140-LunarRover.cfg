// *************************** Lunar Mission Rover Surface Contracts
// 
// Goal for this contract is to explore the surface of the moons around the home planet with a Rover.
//

CONTRACT_TYPE
{
	name 			= LunarRover
	sortKey 		= 130
	group 			= LunarExplorationDivision
	title			= Mission Contracts to Explore the surface of @/targetBody with a rover
	genericTitle 	= Land and collect science at various targets on the surface of the moon with a rover
	topic			= Exploration
	notes			= Perform various mission objectives to explore the surface of @/targetBody using a rover.  
	synopsis 		= Perform various mission objectives to explore the surface of @/targetBody using a rover.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	deadline		= 500
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		=  @/targetBodyValid1
	
	description 		= We want to expand our exploration of the surface of @/targetBody, build a land a rover on the surface to explore the biomes of biome1, biome2, and biome3.
	genericDescription 	= Perform surface exploration of the moon with a rover.
	completedMessage	= Success! We completed all the objectives and explored the surface of @/targetBody using our rover.
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.5				// Science Reward 
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.3					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 1.1					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.5						// Adv Funds
	failureReputation 	= @rewardReputation * 0.3									// Reputation
	failureFunds		= @rewardFunds * 0.05										// Failure Funds
	
	// Contract Significance
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @LunarExplorationDivision:homeMoonsSurface
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}	
	DATA
	{
		type 			= Biome
        hidden = true
		uniquenessCheck = CONTRACT_ACTIVE	
		biomeSelect		= @/targetBodyValid1.Biomes().Where(b => b.RemainingScience() > 10).Random(3)
	}
	//Biome name node
	DATA
    {
		type = Biome
        hidden = true
		
		biome1 = @biomeSelect.First()
		biome2 = @biomeSelect.ElementAt(1)
		biome3 = @biomeSelect.Last()
    }
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Where(e => !e.ID().StartsWith("ROCScience_"))
		experiments2 = @experiments1.Random(4,8)
    }

	DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceBiome1Temp1 = AllScienceSubjectsByBiomeExperiment( [@biome1], [@experiments2])
		scienceBiome1Temp2 = @scienceBiome1Temp1.Where(s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		//scienceBiome1Temp1 = @scienceBiome1Temp2.Where(s => !s.Experiment().ID().StartsWith("ROCScience_"))
		scienceBiome1Temp3 = @scienceBiome1Temp2.Where(s => s.RemainingScience() >= 3.0)
		
		scienceSubjects1 = @scienceBiome1Temp3.Random(3,5)
    }
	DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceBiome2Temp1 = AllScienceSubjectsByBiomeExperiment( [@biome2], [@experiments2])
		scienceBiome2Temp2 = @scienceBiome2Temp1.Where(s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		//scienceBiome2Temp1 = @scienceBiome2Temp2.Where(s => !s.Experiment().ID().StartsWith("ROCScience_"))
		scienceBiome1Temp3 = @scienceBiome2Temp2.Where(s => s.RemainingScience() >= 3.0)
		
		scienceSubjects2 = @scienceBiome1Temp3.Random(3,5)
    }
	DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceBiome3Temp1 = AllScienceSubjectsByBiomeExperiment( [@biome3], @experiments2)
		scienceBiome3Temp2 = @scienceBiome3Temp1.Where(s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		//scienceBiome3Temp1 = @scienceBiome3Temp2.Where(s => !s.Experiment().ID().StartsWith("ROCScience_"))
		scienceBiome3Temp3 = @scienceBiome3Temp2.Where(s => s.RemainingScience() >= 3.0)
		
		scienceSubjects3 = @scienceBiome3Temp3.Random(3,5)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name 	= All
		type	= All

		REQUIREMENT
		{
			name = Orbit
			type = Orbit
			checkType 	= UNMANNED
		}

		REQUIREMENT
		{
			type = Expression
			title = Must have valid experiments to run on biome 1
			expression = @/scienceSubjects1.Count() >= 1
		}
		REQUIREMENT
		{
			type = Expression
			title = Must have valid experiments to run on biome 2
			expression = @/scienceSubjects2.Count() >= 1
		}
		REQUIREMENT
		{
			type = Expression
			title = Must have valid experiments to run biome 3
			expression = @/scienceSubjects2.Count() >= 1
		}
		REQUIREMENT
		{
			name 		= Landing
			type 		= Landing
			checkType 	= UNMANNED
		}
	
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = MoonRover
		type = VesselParameterGroup
		title = Moon Robotic Rover
		define = MoonRover
	
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Needs to be a probe (Uncrewed)
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			disableOnStateChange = true
			title = Land on the surface of @targetBody
			hideChildren = false
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Rover
			title = Vessel type needs to be a rover, please check the vessel type
			completeInSequence 	= true
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			targetBody = @/targetBody
			situation = LANDED
			biome = @/biome1
			title = Reach the first biome of @/biome1 with the rover.
			completeInSequence 	= true
		}
		PARAMETER
		{
			name = CollectScience
			type = CollectScience
			
			title = Collect @scienceSubject1 science at @/biome1
			biome = @scienceSubject1.Biome()
			situation = @scienceSubject1.Situation()
			experiment = @scienceSubject1.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds			= @KSP_Career_Progression:baseComp * 0.05               
			disableOnStateChange = true
			completeInSequence 	= true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubject1 = @/scienceSubjects1
			}
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			targetBody = @/targetBody
			situation = LANDED
			biome = @/biome2
			title = Reach the first biome of @/biome2 with the rover.
			completeInSequence 	= true
		}
		PARAMETER
		{
			name = CollectScience
			type = CollectScience
			
			title = Collect @scienceSubject2 science at @/biome2
			biome = @scienceSubject2.Biome()
			situation = @scienceSubject2.Situation()
			experiment = @scienceSubject2.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds			= @KSP_Career_Progression:baseComp * 0.05               
			disableOnStateChange = true
			completeInSequence 	= true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubject2 = @/scienceSubjects2
			}
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			targetBody = @/targetBody
			situation = LANDED
			biome = @/biome3
			title = Reach the first biome of @/biome3 with the rover.
			completeInSequence 	= true
		}
		PARAMETER
		{
			name = CollectScience
			type = CollectScience
			
			title = Collect @scienceSubject3 science at @/biome3
			biome = @scienceSubject3.Biome()
			situation = @scienceSubject3.Situation()
			experiment = @scienceSubject3.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds			= @KSP_Career_Progression:baseComp * 0.05               
			disableOnStateChange = true
			completeInSequence 	= true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubject3 = @/scienceSubjects3
			}
		}


	}



	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//	

	
}

