// *************************** Interstellar Probe to Other Suns
// 
// Launch and explore other solar systems
//

CONTRACT_TYPE
{
	name 			= interSolarProbe
	sortKey 		= 100
	group 			= InterstellarExplorationDivision
	title			= #IED_Title_SolarProbe
	genericTitle 	= #IED_Generic_SolarProbe
	topic			= Exploration
	notes			= #IED_Notes_SolarProbe
	synopsis 		= #IED_Notes_SolarProbe
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 15
	//deadline		= 90
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= targetBodyValid1
	//
	description 		= #IED_Desc_SolarProbe
	genericDescription 	= #IED_GenDesc_SolarProbe
	completedMessage	= #IED_Complete_SolarProbe
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.1				// Science Reward
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.2					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 2.0 					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.6						// Adv Funds 
	failureReputation 	= @rewardReputation * 0.7									// Reputation
	failureFunds		= @rewardFunds * 0.5 											// Failure Funds
	
	// Contract Significance
	//
	//     Trivial
    //     Significant
    //     Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Career_Progression:intersellarSuns
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}	
	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		homePlanets		 	= @KSP_Career_Progression:homeSystemPlanets
		orbitPlanets		= @/homePlanets.Where(cb => cb.HaveOrbited() )
	}
   DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(12)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1L = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2L = @scienceSubjectsTemp1L.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3L = @scienceSubjectsTemp2L.Where(s => s.Situation() == InSpaceLow )
		scienceSubjectsTemp4L = @scienceSubjectsTemp3L.Where(s => s.RemainingScience() >= 0.5)

        scienceListLow = @scienceSubjectsTemp4L.Random(3,6)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1H = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2H = @scienceSubjectsTemp1H.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3H = @scienceSubjectsTemp2H.Where(s => s.Situation() == InSpaceHigh)
		scienceSubjectsTemp4H = @scienceSubjectsTemp3H.Where(s => s.RemainingScience() >= 0.5)

        scienceListHigh = @scienceSubjectsTemp4H.Random(3,6)
    }
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }	
	DATA
	{
		type = double
		SpaceThreshold = @/targetBody.SpaceAltitudeThreshold()
		AtmLimit = @/targetBody.AtmosphereAltitude()
		//PlanetSOI = @/targetBody.SphereOfInfluence()
		minPe = @AtmLimit * 1.1
		minAp = @SpaceThreshold * 1.1
		minPeKM = @/minPe/1000
		minApKM = @/minAp/1000
		
		title = Find orbit targets for orbiting situation
	}	

	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @/homePlanet.Count() == @/orbitPlanets.Count()
		title = #IED_RqmtMSG1_SolarProbe
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        define = ScienceSat
        disableOnStateChange = false

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
			vesselType = Relay
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = Needs to be a probe (uncrewed)
			minCrew = 0
			maxCrew = 0
		}
		PARAMETER
		{
			name = OrbitSun
			type = Orbit
			situation = ORBITING
			minPeA = @/minPe
			minApA = @/minAp
			title = #IED_MSG4_SolarProbe
			hideChildren = true
		}		
		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubject.Biome()
			situation = @scienceSubject.Situation()
			experiment = @scienceSubject.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubject.Experiment() data!
			title 			= Collect science data from the @scienceSubject.Experiment() in @scienceSubject.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubject = @/scienceListLow
			}
	
		}

		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubjectH.Biome()
			situation = @scienceSubjectH.Situation()
			experiment = @scienceSubjectH.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubjectH.Experiment() data!
			title 			= Collect science data from the @scienceSubjectH.Experiment() in @scienceSubjectH.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubjectH = @/scienceListHigh
			}
	
		}

	}



	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviors
	//

}

