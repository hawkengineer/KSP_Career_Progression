// *************************** Home System Solar Contracts
// 
// Goal for this contract is to send a probe to collect science around the home sun
//

CONTRACT_TYPE
{
	name 			= innerSolarExploration
	sortKey 		= 260
	group 			= PSD-InnerPlanets
	title			= #PSD_Title_SolarScience
	genericTitle 	= #PSD_Title_SolarScience
	topic			= Exploration
	notes			= #PSD_Notes_SolarScience
	synopsis 		= #PSD_Notes_SolarScience
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	//deadline		= 400
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		=  Sun()
	description 		= We identified some key science to collect around our Sun, build and launch a probe to collect the sun and return it home. 
	genericDescription 	= #PSD_GenDesc_SolarScience
	completedMessage	= #PSD_Complete_SolarScience
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.1				// Science Reward 
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.2					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 0.6					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.5						// Adv Funds
	failureReputation 	= @rewardReputation * 0.7									// Reputation
	failureFunds		= @rewardFunds * 0.5										// Failure Funds
	
	// Contract Significance
	//
	//     Trivial
    //     Significant
    //     Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	//

	DATA
	{
		type = double
		SpaceThreshold = @/targetBody.SpaceAltitudeThreshold()
		AtmLimit = @/targetBody.AtmosphereAltitude()
	
		title = #PSD_MSG1_SolarScience
	}	
	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		targetList		 	= @KSP_Career_Progression:nextBodies
		reachedList			= @KSP_Career_Progression:reachedPlanets		
	}
   DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(12)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1L = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2L = @scienceSubjectsTemp1L.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3L = @scienceSubjectsTemp2L.Where(s => s.Situation() == InSpaceLow )
		scienceSubjectsTemp4L = @scienceSubjectsTemp3L.Where(s => s.RemainingScience() >= 0.5)

        scienceListLow = @scienceSubjectsTemp4L.Random(3,6)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1H = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2H = @scienceSubjectsTemp1H.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3H = @scienceSubjectsTemp2H.Where(s => s.Situation() == InSpaceHigh)
		scienceSubjectsTemp4H = @scienceSubjectsTemp3H.Where(s => s.RemainingScience() >= 0.5)

        scienceListHigh = @scienceSubjectsTemp4H.Random(3,6)
    }
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Ideal
    }
	DATA
	{
		type			= int
		requiredValue 	= false
		numMoons		= @KSP_Career_Progression:homeMoons.Count()
		numMoonsOrbit	= @KSP_Career_Progression:orbitedMoons.Count()
		
	}	
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceListLow.Count() >= 1

        title = #PSD_MSG2_SolarScience
    }
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceListHigh.Count() >= 1

        title = #PSD_MSG3_SolarScience
    }
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @/numMoons == @/numMoonsOrbit
		title = Verify that a probe has orbited all homeworld moons
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = SolarProbe
		type = VesselParameterGroup
		title = Build a rocket to launch that reaches the target orbit
		define = SolarProbe
		dissassociateVesselsOnContractCompletion = true
		dissassociateVesselsOnContractFailure = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a new probe for the mission
			hideChildren = false
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			hideChildren = true
			title = Needs to be uncrewed probe
			minCrew = 0
			maxCrew = 0
		}
		completedMessage = #PSD_MSG4_SolarScience
	}
	PARAMETER
	{
		name = SolarProbe2
		type = VesselParameterGroup
		title = Reached Orbit
		Vessel = SolarProbe
		dissassociateVesselsOnContractCompletion = true
		dissassociateVesselsOnContractFailure = true
		completeInSequence = true

		PARAMETER
		{
			name = Orbit
			type = Orbit
			siutation = ORBITING
			title = Reach orbit around @/targetBody
			minApA = @/targetBody.SpaceAltitudeThreshold() * 1.1
			minPeA = @/targetBody.AtmosphereAltitude() * 1.1
			completedMessage = #PSD_MSG5_SolarScience
			hideChildren = false
		}
    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
 		Vessel = SolarProbe
        disableOnStateChange = false
		completeInSequence = true

		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubject.Biome()
			situation = @scienceSubject.Situation()
			experiment = @scienceSubject.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubject.Experiment() data!
			title 			= Collect science data from the @scienceSubject.Experiment() in @scienceSubject.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubject = @/scienceListLow
			}
	
		}

		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubjectH.Biome()
			situation = @scienceSubjectH.Situation()
			experiment = @scienceSubjectH.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubjectH.Experiment() data!
			title 			= Collect science data from the @scienceSubjectH.Experiment() in @scienceSubjectH.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubjectH = @/scienceListHigh
			}
	
		}

	}


	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//	

	
}

