// *************************** Planetary Moon Mission Contracts
// 
// Goal for this contract is to explore the Moons around the planets within the current solar system
//  Identify some low and high space science
//

CONTRACT_TYPE
{
	name 			= PlanetMoonOrbitExploration
	sortKey 		= 120
	group 			= PlanetaryScienceDivision
	title			= Explore the moons around @/planetBody
	genericTitle 	= Explore the different moons around the planet
	topic			= Exploration
	notes			= Enter into orbit around the moons of @/planetBody and collect the required science.  The objectives can be accomplished through more than one launch.
	synopsis 		= Enter into orbit around the moons of @/planetBody and collect the required science.  The objectives can be accomplished through more than one launch.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	//deadline		= 400
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		=  @/targetBodyValid1
	
	description 		= We reached the planet of @/planetBody but now we want to explore the moon(s).  Send a probe into the desired orbit and collect the required science.
	genericDescription 	= Perform an orbital science study in low and high orbit around the moons
	completedMessage	= Success! We completed all the objectives and explored the moons of @/planetBody
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.5				// Science Reward 
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.3					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 0.5					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.4						// Adv Funds
	failureReputation 	= @rewardReputation * 0.3									// Reputation
	failureFunds		= @rewardFunds * 1.0										// Failure Funds
	
	// Contract Significance
	//
	//     Trivial
    //     Significant
    //     Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Career_Progression:homeSystemPlanets
	}
	DATA_EXPAND
	{
		type 		= CelestialBody
		moonTarget	= @targetBody1.Children()
	}


	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/moonTarget
		uniquenessCheck		= CONTRACT_ALL
		title 				= Find the selected Moon
	}	
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		planetBody			= @/targetBody.Parent()
		title 				= Find the moon's parent
	}	
	DATA
	{
		type 		= List<CelestialBody>
		planetMoons	= @/planetBody.Children()
		title 		= Get the number of moons
	}

	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		targetList		 	= @KSP_Career_Progression:nextBodies
		reachedList			= @KSP_Career_Progression:reachedBodies		
	}
   DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(12)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1L = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2L = @scienceSubjectsTemp1L.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3L = @scienceSubjectsTemp2L.Where(s => s.Situation() == InSpaceLow )
		scienceSubjectsTemp4L = @scienceSubjectsTemp3L.Where(s => s.RemainingScience() >= 0.5)

        scienceListLow = @scienceSubjectsTemp4L.Random(3,6)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1H = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2H = @scienceSubjectsTemp1H.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3H = @scienceSubjectsTemp2H.Where(s => s.Situation() == InSpaceHigh)
		scienceSubjectsTemp4H = @scienceSubjectsTemp3H.Where(s => s.RemainingScience() >= 0.5)

        scienceListHigh = @scienceSubjectsTemp4H.Random(3,6)
    }
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }
	DATA
	{
		type = double
		SpaceThreshold = @/targetBody.SpaceAltitudeThreshold()
		AtmLimit = @/targetBody.AtmosphereAltitude()
		PlanetSOI = @/targetBody.SphereOfInfluence()
		minPe = @SpaceThreshold - ((@/SpaceThreshold - @/AtmLimit)*0.4)
		minAp = @SpaceThreshold + ((@/MoonSOI - @/SpaceThreshold)*0.3)
		minPeKM = @/minPe/1000
		minApKM = @/minAp/1000
		
		title = Find orbit targets for orbiting situation
	}	
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceListLow.Count() >= 1

        title = Must have a valid experiment to perform in Low Orbit
    }
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceListHigh.Count() >= 1

        title = Must have a valid experiment to perform in High Orbit
    }
	REQUIREMENT
	{
		name = All
		type = All

		REQUIREMENT
		{
			name = Orbit
			type = Orbit
			checkType = UNMANNED
			targetBody = @/planetBody
		}

		REQUIREMENT
		{
			name = Expression1
			type = Expression
			expression = @/planetMoons.Count() > 0
			title = Ensure there is at least one moon to orbit.
		}
	
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	
    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        define = ScienceSat
        disableOnStateChange = false

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = Needs to be a probe (uncrewed)
			minCrew = 0
			maxCrew = 0
		}
		PARAMETER
		{
			name = OrbitPlanet
			type = Orbit
			situation = ORBITING
			maxPeA = @/minPe
			maxApA = @/minAp
			title = Enter Orbit around @targetBody with a Periapsis below @/minPeKM km and Apoapsis below @/minApKM km
			hideChildren = true
		}		
		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubject.Biome()
			situation = @scienceSubject.Situation()
			experiment = @scienceSubject.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubject.Experiment() data!
			title 			= Collect science data from the @scienceSubject.Experiment() in @scienceSubject.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubject = @/scienceListLow
			}
	
		}

		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome = @scienceSubjectH.Biome()
			situation = @scienceSubjectH.Situation()
			experiment = @scienceSubjectH.Experiment()
			recoveryMethod = @/recoveryMethod
			rewardFunds = @/KSP_Career_Progression:baseComp * 0.1
			completedMessage = Objective Complete!  We collected @scienceSubjectH.Experiment() data!
			title 			= Collect science data from the @scienceSubjectH.Experiment() in @scienceSubjectH.Situation()
		
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubjectH = @/scienceListHigh
			}
	
		}

	}


	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//	

	
}

