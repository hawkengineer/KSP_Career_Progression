// *************************** Planet Atmospheric Probe Mission
// 
// Goal is to send a probe deep into Gas giants and return science data.
//

CONTRACT_TYPE
{
	name 			= outerPlanetAtmosphere
	sortKey 		= 240
	group 			= PSD-OuterPlanets
	title			= Atmospheric Probe to @/targetBody
	genericTitle 	= Send a atmospheric probe to send back science data within the gas giants
	topic			= Exploration
	notes			= Send a probe within the atmosphere of @/targetBody.  Collect and transmit science.
	synopsis 		= Send a probe within the atmosphere of @/targetBody.  Collect and transmit science.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	//deadline		= 400
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		=  @/targetBodyValid1
	
	description 		= We reached the gas giants and observed them from orbit, but we want to send a probe deep into the atmosphere of @/targetBody to retrieve science data.  Send a probe into the atmosphere and transmit data as long as it survives.
	genericDescription 	= we want to send a probe deep into the atmosphere of a Gas Giant
	completedMessage	= Success! We successfully gathered the science and trasmitted it back to mission control!
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.5				// Science Reward 
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.2					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 1.0					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.4						// Adv Funds
	failureReputation 	= @rewardReputation * 0.3									// Reputation
	failureFunds		= @rewardFunds * 1.0										// Failure Funds
	
	// Contract Significance
	//
	//     Trivial
    //     Significant
    //     Exceptional
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KSP_Career_Progression:outerGasGiants
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}	
	DATA
	{
		type = double
		AtmoAlt = @targetBody.AtmosphereAltitude()
		AtmoAltKM = @/AtmoAlt / 1000     // Convert to km 
		Alt90KM = @targetBody.AtmosphereAltitude() * 0.90 /1000
		Alt80KM = @targetBody.AtmosphereAltitude() * 0.80 /1000
		Alt70KM = @targetBody.AtmosphereAltitude() * 0.70 /1000
		Alt60KM = @targetBody.AtmosphereAltitude() * 0.60 /1000
		Alt50KM = @targetBody.AtmosphereAltitude() * 0.50 /1000
		Alt40KM = @targetBody.AtmosphereAltitude() * 0.40 /1000
		Alt30KM = @targetBody.AtmosphereAltitude() * 0.30 /1000
		Alt20KM = @targetBody.AtmosphereAltitude() * 0.20 /1000
		Alt10KM = @targetBody.AtmosphereAltitude() * 0.10 /1000
		title = Determine the atmosphere altitude interface for the planet
	}	
	DATA
	{
		type = List<float>
		AltStep = [ 90, 80, 70, 60, 50, 40, 30, 20, 10]
		title = Define optional descent objectives
	}

    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Where(e => !e.ID().StartsWith("ROCScience_"))
		experiments2 = @experiments1.Random(2,4)
    }

	DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment( [@/targetBody] , @experiments2 )
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == FlyingHigh )
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.RemainingScience() >= 3.0)
		
		scienceSubjects = @scienceSubjectsTemp3.Random(3,5)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }
	
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name 	= All
		type	= All

		REQUIREMENT
		{
			name = Orbit
			type = Orbit
			checkType 	= UNMANNED
		}

		REQUIREMENT
		{
			type = Expression
			title = Must have valid experiments to run around the home planet.
			expression = @/scienceSubjects.Count() >= 1
		}
		
		REQUIREMENT
		{
			name = Expression2
			type = Expression
			expression = @targetBody.HasSurface() == false
			title = Planet must be a gas planet without a surface
		}

	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	
 	PARAMETER
	{
		name = PlanetSurface
		type = VesselParameterGroup
		title = Send a probe to probe the atmosphere of the Gas Giant of @/targetBody
		define = PlanetSurface
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
			title = Vessel needs to be a probe type
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Needs to be a probe (uncrewed)
			hideChildren = true
		}
		PARAMETER
		{
			name = ReachOrbit
			type = ReachState
			situation = ORBITING
			situation = ESCAPING
			title = Reached the Planet SOI either in orbit or on a flyby trajectory
			completeInSequence = true
		}
		PARAMETER
		{
			name = suborbital
			type = ReachState
			situation = SUB_ORBITAL
			title = Enter into a suborbital trajectory
			completeInSequence = true
		}
		PARAMETER
		{
			name = FlyingState
			type = ReachState
			situation = FLYING
			title = Enter into atmosphere, survive long enough to transmit some science data
			completeInSequence = true
				PARAMETER
				{
					name = CollectScience
					type = CollectScience
			
					title = Collect @scienceSubject science
					biome = @scienceSubject.Biome()
					situation = @scienceSubject.Situation()
					experiment = @scienceSubject.Experiment()
					recoveryMethod = @/recoveryMethod
					rewardFunds			= @KSP_Career_Progression:baseComp * 0.5               
					disableOnStateChange = true
					completeInSequence 	= true
		
					ITERATOR
					{
						type = ScienceSubject
						scienceSubject = @/scienceSubjects
					}
				}
		}				
		// ----------------------------------------------------- Optional Objectives
		//
		
		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.90
			optional = true
			title = Descend to reach the altitude of @/Alt90KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt90KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.80
			optional = true
			title = Descend to reach the altitude of @/Alt80KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt80KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.70
			optional = true
			title = Descend to reach the altitude of @/Alt70KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt70KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.60
			optional = true
			title = Descend to reach the altitude of @/Alt60KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt60KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.50
			optional = true
			title = Descend to reach the altitude of @/Alt50KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt50KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.40
			optional = true
			title = Descend to reach the altitude of @/Alt40KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt40KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.30
			optional = true
			title = Descend to reach the altitude of @/Alt30KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt30KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.20
			optional = true
			title = Descend to reach the altitude of @/Alt20KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt20KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	

		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * 0.10
			optional = true
			title = Descend to reach the altitude of @/Alt10KM km
			completedMessage = Congratulations! Our probe have passed the altitude of @/Alt10KM km, how much longer will it survived!
			rewardFunds = @KSP_Contracts:FundComp 
		}	
	}



	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//	

	
}

