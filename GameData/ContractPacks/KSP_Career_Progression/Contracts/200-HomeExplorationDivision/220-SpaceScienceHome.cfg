// *************************** Space Science Collection Contract
// 
// Goal is to collect remaining science from orbit around the home planet
//

CONTRACT_TYPE
{
	name 			= SpaceScienceHome
	sortKey 		= 220
	group 			= ExplorationSystemDivision
	title			= Collect Orbital Science, perform identified science experiments in space around @/targetBody
	genericTitle 	= Collect identified science experiments in low or high space per contract requirements.
	topic			= Exploration
	notes			= Launch a craft to collect some science data
	synopsis 		= Run the identified experiments in space around @/targetBody.
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	deadline		= 100
	maxCompletions 	= 1
	maxSimultaneous = 1
	targetBody		= HomeWorld()
	
	description 		= Our scientists are not happy with the missing science we could collect in space around @/targetBody.  Launch a mission to collect science data in space.
	genericDescription 	= Our scientists are not happy with the missing science we could collect in space around our home planet.  Launch a mission to collec the missing science data.
	completedMessage	= Success! Our science team is happy with the results, but they fear there is more science to collect.  
	
	// Contract Rewards
	//
	rewardScience		= @KSP_Career_Progression:rewardScience * 0.5				// Science Reward 
	rewardReputation	= @KSP_Career_Progression:rewardRep * 0.3					// Reputation Increase
	rewardFunds			= @KSP_Career_Progression:baseComp * 0.7					// Funds
	advanceFunds		= @KSP_Career_Progression:baseAdv * 0.6						// Adv Funds
	failureReputation 	= @rewardReputation * 0.3									// Reputation
	failureFunds		= @rewardFunds * 0.05										// Failure Funds
	
	// Contract Significance
	//
	prestige = Trivial
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
   DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(4)
    }
    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.TotalScience() >= 0.1)

        scienceList = @scienceSubjectsTemp4.Random(6,8)
    }
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = PolarSat
		title = Complete @contractType Contract
	}
	REQUIREMENT
    {
        type = Expression
        expression = @/scienceList.Count() >= 1

        title = Must have a valid experiment to perform
    }

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod
		rewardFunds = @/KSP_Career_Progression:baseComp * 0.08
		completedMessage = Objective Complete!  We collected @scienceSubject.Experiment() data!
		title 			= Collect science data from the @scienceSubject.Experiment() in @scienceSubject.Situation()
		
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject = @/scienceList
        }
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Behaviours
	//	

	
}

