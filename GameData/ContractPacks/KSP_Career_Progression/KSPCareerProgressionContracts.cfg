CONTRACT_GROUP
{
	name = KSP_Career_Progression
	displayName = Kerbal Air and Space Program
	agent = Kerbal Space Program
	minVersion = 1.15.0
	maxSimultaneous = 0
	maxCompletions = 0
	tip = Exploring the world of Kerbal Space Program

	// =======================================================================================================================================
	//
	// Disable some of the stock contracts
	// TBD - will complete section once base set of contracts are created
	//
	// =======================================================================================================================================
	//
	// Define System PLanets and Moons
	//
	// This section will identify planets based on the detected planet pack installed.  This is needed so that planet packs that have more than one solar system, the contract system works properly.
	//
		
	DATA
	{
		type = Double
		requiredValue = false
		homeWorldSMA = HomeWorld().SemiMajorAxis()                  	// Find the homeWorld SMA to configure inner and outer planets in later section
	}	

	DATA:NEEDS[BeyondHome]
	{
		type = Double
		requiredValue = false
		lastSystemPlanetSMA = CelestialBody(Vasto).SemiMajorAxis()		// Find the last planet SMA in the home system
		//
		extraSystemSearchLimit = @lastSystemPlanetSMA * 1.1				// SMA Limit for detecting possible additional stellar systems for contracts
		//
		// Temp section to determine the multipliers for each body
		//
		body1 = CelestialBody(Sun).Multiplier()
		body2 = CelestialBody(Fate).Multiplier()
		body3 = CelestialBody(Destiny).Multiplier()
		body4 = CelestialBody(Fury).Multiplier()
		body5 = CelestialBody(Anger).Multiplier()
		body6 = CelestialBody(Hydrus).Multiplier()
		body7 = CelestialBody(Hydron).Multiplier()
		body8 = CelestialBody(Kerbin).Multiplier()
		body9 = CelestialBody(Lua).Multiplier()
		body10 = CelestialBody(Armstrong).Multiplier()
		body11 = CelestialBody(Ash).Multiplier()
		body12 = CelestialBody(Scaythe).Multiplier()
		body13 = CelestialBody(Scindo).Multiplier()
		body14 = CelestialBody(Gateway).Multiplier()
		body15 = CelestialBody(Proxim).Multiplier()
		body16 = CelestialBody(Kohm).Multiplier()
		body17 = CelestialBody(Eidos).Multiplier()
		body18 = CelestialBody(Ansia).Multiplier()
		body19 = CelestialBody(Jade).Multiplier()
		body20 = CelestialBody(Rock).Multiplier()
		body21 = CelestialBody(Vasto).Multiplier()
		body22 = CelestialBody(Voss).Multiplier()
		body23 = CelestialBody(Kerbol).Multiplier()
		body24 = CelestialBody(Tribute).Multiplier()
		body25 = CelestialBody(Dynasty).Multiplier()
		body26 = CelestialBody(Drohze).Multiplier()
		body27 = CelestialBody(Janus).Multiplier()
		body28 = CelestialBody(Tua).Multiplier()
		body29 = CelestialBody(Eterna).Multiplier()
		body30 = CelestialBody(Talon).Multiplier()
		body31 = CelestialBody(Lond).Multiplier()
		body32 = CelestialBody(Verna).Multiplier()

		

	}	

	DATA:NEEDS[JNSQ]
	{
		type = Double
		requiredValue = false
		lastSystemPlanetSMA = CelestialBody(Nara).SemiMajorAxis()		// Find the last planet SMA in the home system
		//
		extraSystemSearchLimit = @lastSystemPlanetSMA * 1.1				// SMA Limit for detecting possible additional stellar systems for contracts
	}	

	DATA:NEEDS[!BeyondHome|!JNSQ]
	{
		type = Double
		requiredValue = false
		lastSystemPlanetSMA = 100000000000								// Default value for stock and other unknown planet packs
		//
		extraSystemSearchLimit = @lastSystemPlanetSMA * 1.1				// SMA Limit for detecting possible additional stellar systems for contracts
	}	
	
	//
	// =======================================================================================================================================
	//
	// This section captures the planet list for either unknown planet packs or for Stock and JNSQ.  Adjustments will be made for planet packs such as Beyond Home and others to accomodate the different scales.
	//
	
	DATA
	{
		type = List<CelestialBody>
		requiredValue = True
		//
		homeSuns = HomeWorld().Parent()
		tempSuns = AllBodies().Where(cb => cb.SemiMajorAxis() <= @homeWorldSMA && cb !=HomeWorld() && cb.Parent() == HomeWorld().Parent() && cb.IsPlanet() && !cb.HasSurface() )
		newHomeSuns = @homeSuns.Concat(@tempSuns)
		//
		Temp1 = HomeWorld().Parent().Children().ExcludeAll( @newHomeSuns )
		homeSystemPlanets = @/Temp1.ExcludeAll( @solarSystemSuns )
		//
		//homeSystemPlanets2 = AllBodies().Where(cb => cb.SemiMajorAxis() < @extraSystemSearchLimit && cb.Parent() == HomeWorld().Parent() ).ExcludeAll( @newHomeSuns )
		innerBodies = AllBodies().Where(cb => cb.SemiMajorAxis() <= @homeWorldSMA && cb !=HomeWorld() && cb.Parent() == HomeWorld().Parent() && cb.IsPlanet() && cb.HasSurface() )
		outerBodies = AllBodies().Where(cb => cb.SemiMajorAxis() >= @homeWorldSMA && cb.SemiMajorAxis() < @extraSystemSearchLimit && cb !=HomeWorld() && cb.Parent() == HomeWorld().Parent() )
		//
		solarSystemSuns = AllBodies().Where(cb => cb.SemiMajorAxis() > @extraSystemSearchLimit && cb.Parent() == HomeWorld().Parent() )
		//
		homeplanet = HomeWorld()
		//
		
	}

	//
	// =======================================================================================================================================
	//
	// This section just performs a random roll which is used within some of the contract setup
	//
	
	DATA
	{
		type = int
		randomRoll = Random(1, 10)
		//
	}
	
	//
	// =======================================================================================================================================
	//
	// This section setups the nominal/base contract payments
	//
	
	DATA
	{
		type = Double
		baseAdv  = 100000		// Set the base advance payment to $100,000
		baseComp = 100000		// Set the base completion payment to $100,000
		baseFail = 100000		// Set the base failure cost to $100,000
		failRep  = 50			// Set the base reputation faiilure cost to 50
		rewardRep = 75			// Set the base reputation reward to 75
		rewardScience = 5		// Set the base science reward to 5
		//
		title = Configure the base rewards and failure rates for all contracts
		requiredValue = false
		//
	}
	
	//
	// =======================================================================================================================================
	//
	// This section configures the different contract groups which all the contracts will be placed
	//
	//
	
	CONTRACT_GROUP
	{
		name = EarlySpaceProgram
		displayName = Sounding Rocket Division (SRD)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 100

	}

	CONTRACT_GROUP
	{
		name = HomeWorldExploration
		displayName = HomeWorld Exploration Division (HED)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 200
		
	}

	CONTRACT_GROUP
	{
		name = HomeOrbitExploration
		displayName = HomeWorld Orbital Science Division (HOSD)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 300
		
	}

	CONTRACT_GROUP
	{
		name = LunarExploration
		displayName = Lunar Science Exploration Division (LSED)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 400
		
	}

	CONTRACT_GROUP
	{
		name = ScienceExploration
		displayName = Planetary Science Division (PSD)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 500
		
	}

	CONTRACT_GROUP
	{
		name = KerbalCrewExploration
		displayName = Kerbal Crew Exploration Division (KCED)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 600
		
	}

	CONTRACT_GROUP
	{
		name = InterstellarExploration
		displayName = Interstellar Science Exploration Division (ISED)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 700
		
	}

	CONTRACT_GROUP
	{
		name = Communications
		displayName = Satellite Communications Division (SCD)
		agent = EarlySpaceProgram
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 800
		
	}

	
}		